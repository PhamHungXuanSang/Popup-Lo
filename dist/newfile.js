(()=>{"use strict";const e={closeAfterXSeconds:(e,t)=>{if(1==e.enable){const o=document.querySelector(`.${t}`).querySelector(".closeAfterXSeconds");new MutationObserver((t=>{let n;t.forEach((t=>{"attributes"===t.type&&"class"===t.attributeName&&(o.classList.contains("active")?n=setTimeout((()=>{o.classList.remove("active"),o.style.setProperty("display","none")}),e.seconds):clearTimeout(n))}))})).observe(o,{attributes:!0})}},closeClickButton:(e,t)=>{if(!0===e.enable){const e=document.querySelector(`.${t}`);e.querySelector(".btnClosePopup").onclick=()=>{e.querySelector(".closeClickButton").classList.remove("active")}}},closeClickOutside:(e,t)=>{if(1==e.enable){function o(e){e.stopPropagation();let t=e.target.parentElement;for(;t!==document.body;){if(t.classList.contains("closeClickOutside")||t.classList.contains("activePopup"))return t;t=t.parentElement}return null}document.querySelectorAll(".closeClickOutside").forEach(((e,t)=>{document.addEventListener("click",(n=>{if(e.classList.contains("active")&&n.target!=document.querySelector(".btnpopupTest"+(t+1))){if(1==o(n))return;null==o(n)&&e.classList.remove("active")}}))}))}}},t=class{constructor(e){this.config=e}readConfig(e,t,o,n){var i=!1;return t.forEach((t=>{void 0!==e[t]&&1==o[t](e[t],n)&&(i=!0)})),i}},o=class{constructor(e,t){this.options=e,this.keyPopup=t,this.init()}init(){(new t).readConfig(this.options,["closeAfterXSeconds","closeClickButton","closeClickOutside"],e,this.keyPopup)}},n={scrollToXPercent:(e,t)=>{if(!e.enable)return!1;window.addEventListener("scroll",(function(){const o=window.scrollY;console.log("Giá trị đã cuộn: "+o);const n=document.body.scrollHeight-window.innerHeight;console.log("Chiều cao page: "+n);let i=sessionStorage.getItem(t);console.log(e.percent/100*n),o>=e.percent/100*n&&null===i&&(document.querySelector(`.${t}`).querySelector(".scrollToXPercent").classList.add("active"),sessionStorage.setItem(t,1))}))},visitWebAfterXSeconds:(e,t)=>{if(1==e.enable){const o=document.querySelector(`.${t}`).querySelector(".visitWebAfterXSeconds");setTimeout((()=>{o.classList.add("active")}),e.seconds)}},onClickItem:(e,t)=>{console.log(t),1==e.enable&&(document.querySelector(`.btn${t}`).onclick=()=>{document.querySelector(`.${t}`).querySelector(".onClickItem").classList.add("active")})},afterViewXPage:(e,t)=>{if(1==e.enable){var o=localStorage.getItem(`${t}`);null==o&&(o=0),o++,localStorage.setItem(`${t}`,o),o===e.NumPage&&document.querySelector(`.${t}`).querySelector(".afterViewXPage").classList.add("active")}}},i=class{constructor(e,t){this.options=e,this.keyPopup=t,this.init()}init(){this.isOpenPopup()}isOpenPopup(){return(new t).readConfig(this.options,["scrollToXPercent","visitWebAfterXSeconds","onClickItem","afterViewXPage"],n,this.keyPopup)}},s=class{constructor(e,t){this.optionOpen=e.open,this.optionClose=e.close,this.keyPopup=t,this.init()}init(){new i(this.optionOpen,this.keyPopup),new o(this.optionClose,this.keyPopup)}},a={existClass:e=>!0===e.enable&&document.body.classList.contains("saas-popup"),existCookie:e=>{if(!0===e.enable){return 1==(e=>{let t=e+"=",o=decodeURIComponent(document.cookie).split(";"),n=o.length;for(let e=0;e<n;e++){let n=o[e];for(;" "==n.charAt(0);)n=n.substring(1);if(0==n.indexOf(t))return n.substring(t.length,n.length)}return""})("saas-popup")}return!1}},r=class{constructor(e){this.options=e,this.init()}init(){(new t).readConfig(this.options,["existClass","existCookie"],a)}getStatus(){return(new t).readConfig(this.options,["existClass","existCookie"],a)}},c={positionPopup:(e,t)=>{if(console.log(e),null!=e.width&&null!=e.height){var o=document.documentElement.clientWidth,n=document.documentElement.clientHeight,i=e.width,s=e.height;o<=360?(i*=.4,s*=.4):o<=480?(i*=.5,s*=.5):o<=640?(i*=.7,s*=.7):o<=768&&(i*=.8,s*=.8);var a=(o-i)/o*100,r=(n-s)/n*100,c=o*(e.x/100)*(a/100),l=n*(e.y/100)*(r/100);let u=document.querySelector(`.${t}`).querySelector(".positionPopup");console.log(u),u.style.setProperty("width",`${i}px`,"important"),u.style.setProperty("height",`${s}px`,"important"),u.style.setProperty("left",`${c}px`,"important"),u.style.setProperty("top",`${l}px`,"important")}},overlayPopup:function(e,t){if(console.log(e),!0===e.enable){let e=!1;const o=document.querySelector(`.${t}`).querySelector(".overlayPopup");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName)if(o.classList.contains("active")&&!1===e){let t=document.createElement("div");t.classList.add("overlay"),document.querySelector("body").appendChild(t),e=!0}else if(!o.classList.contains("active")){let t=document.querySelector(".overlay");t&&document.querySelector("body").removeChild(t),e=!1}}))})).observe(o,{attributes:!0})}}},l=class{constructor(e,t){this.options=e,this.keyPopup=t,this.init()}init(){(new t).readConfig(this.options,["overlayPopup","positionPopup"],c,this.keyPopup)}},u={moveFromTop:(e,t)=>{if(!0===e.enable){const o=e.easing,n=window.innerHeight*(e.movingLength/100),i=document.querySelector(`.${t}`).querySelector(".moveFromTop");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName&&i.classList.contains("active")){const t=[{transform:`translateY(-${n}px)`,opacity:0},{transform:"translateY(0px)",opacity:1}],s={duration:e.duration,iterations:1,easing:o};i.animate(t,s)}}))})).observe(i,{attributes:!0})}},horizontalMove:(e,t)=>{if(!0===e.enable){const o=e.easing,n=window.innerWidth,i="left"==e.movingFrom.toLowerCase()?-n*(e.movingLength/100):n*(e.movingLength/100),s=document.querySelector(`.${t}`).querySelector(".horizontalMove");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName&&s.classList.contains("active")){const t=[{transform:`translateX(${i}px)`,opacity:0},{transform:"translateX(0px)",opacity:1}],n={duration:e.duration,iterations:1,easing:o};s.animate(t,n)}}))})).observe(s,{attributes:!0})}},zoomIn:(e,t)=>{if(!0===e.enable){const o=e.easing,n=document.querySelector(`.${t}`).querySelector(".zoomIn");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName&&n.classList.contains("active")){const t=[{transform:`scale(${e.fromPercent/100})`,opacity:0},{transform:"scale(1)",opacity:1}],i={duration:e.duration,iterations:1,easing:o};n.animate(t,i)}}))})).observe(n,{attributes:!0})}},fadeIn:(e,t)=>{if(1==e.enable){const o=e.easing,n=document.querySelector(`.${t}`).querySelector(".fadeIn");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName&&n.classList.contains("active")){const t=[{opacity:0},{opacity:1}],i={duration:e.duration,iterations:1,easing:o};n.animate(t,i)}}))})).observe(n,{attributes:!0})}}},p=class{constructor(e,t){this.options=e,this.keyPopup=t,this.init()}isEnableAnimations(){return this.options.enableAnimation}init(){this.isEnableAnimations()&&this.isOpenPopup()}isOpenPopup(){return(new t).readConfig(this.options,["moveFromTop","horizontalMove","zoomIn","fadeIn"],u,this.keyPopup)}},d={zoomOut:(e,t)=>{if(!0===e.enable){const o=e.easing,n=document.querySelector(`.${t}`).querySelector(".zoomOut");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName&&!n.classList.contains("active")){async function i(){1==await new Promise((t=>{const i={duration:e.duration,iterations:1,easing:o};n.animate([{transform:"scale(1)"},{transform:"scale(0)"}],i).onfinish=()=>{t(!0)}}))&&n.style.setProperty("display","none")}n.style.setProperty("display","block","important"),i()}}))})).observe(n,{attributes:!0})}},fadeOut:(e,t)=>{if(!0===e.enable){const o=e.easing,n=document.querySelector(`.${t}`).querySelector(".fadeOut");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName&&!n.classList.contains("active")){async function i(){1==await new Promise((t=>{const i={duration:e.duration,iterations:1,easing:o};n.animate([{opacity:1},{opacity:0}],i).onfinish=()=>{t(!0)}}))&&n.style.setProperty("display","none")}n.style.setProperty("display","block","important"),i()}}))})).observe(n,{attributes:!0})}},moveToTop:(e,t)=>{if(!0===e.enable){const o=e.easing,n=window.innerHeight*(e.movingLength/100),i=document.querySelector(`.${t}`).querySelector(".moveToTop");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName&&!i.classList.contains("active")){async function s(){1==await new Promise((t=>{const s=[{transform:"translateY(0px)",opacity:1},{transform:`translateY(-${n}px)`,opacity:0}],a={duration:e.duration,iterations:1,easing:o};i.animate(s,a).onfinish=()=>{t(!0)}}))&&i.style.setProperty("display","none")}i.style.setProperty("display","block","important"),s()}}))})).observe(i,{attributes:!0})}},horizontalMove:(e,t)=>{if(!0===e.enable){const o=e.easing,n=window.innerWidth,i="left"==e.movingTo.toLowerCase()?-n*(e.movingLength/100):n*(e.movingLength/100),s=document.querySelector(`.${t}`).querySelector(".horizontalMove");new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"class"===t.attributeName&&!s.classList.contains("active")){async function n(){1==await new Promise((t=>{const n=[{transform:"translateX(0px)",opacity:1},{transform:`translateX(${i}px)`,opacity:0}],a={duration:e.duration,iterations:1,easing:o};s.animate(n,a).onfinish=()=>{t(!0)}}))&&s.style.setProperty("display","none")}s.style.setProperty("display","block","important"),n()}}))})).observe(s,{attributes:!0})}}},m=class{constructor(e,t){this.options=e,this.keyPopup=t,this.init()}isDisnableAnimations(){return this.options.enableAnimation}init(){this.isDisnableAnimations()&&this.isClosePopup()}isClosePopup(){(new t).readConfig(this.options,["zoomOut","fadeOut","moveToTop","horizontalMove"],d,this.keyPopup)}},h=class{constructor(e,t){this.optionAppear=e.appear,this.optionDisAppear=e.disappear,this.keyPopup=t,this.init()}init(){new p(this.optionAppear,this.keyPopup),new m(this.optionDisAppear,this.keyPopup)}},b=class{constructor(e,t,o,n){this.className=e,this.html=t,this.idPopup=o,this.classList=n}innerPopup(e){const t=document.createElement("div");t.style.setProperty("display","none");for(let e of this.classList)t.classList.add(e);t.innerHTML=this.html,t.style.setProperty("position","fixed","important"),document.querySelector(`.${this.idPopup}`).appendChild(t)}},y=class{constructor(e,t){this.config=e,this.keyPopup=t}addStyleCSS(){document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelector("head"),t=document.createElement("link");t.rel="stylesheet",t.href="https://phamhungxuansang.github.io/Popup-Lo/src/core/core.css",e.appendChild(t)}))}findKeysWithEnableTrue(e){const t=[];for(const o in e)if("object"==typeof e[o]){const n=this.findKeysWithEnableTrue(e[o]);n.length>0&&t.push(...n.map((e=>`${o}.${e}`)))}else"enable"===o&&!0===e[o]&&t.push(o);return t}splitStringToArray(e){return e.split(".")}filterEnabledElements(e){return e.filter((e=>"enable"!==e))}functionPopupEnabled=()=>{const e=this.findKeysWithEnableTrue(this.config);var t=["positionPopup"];return e.forEach((e=>{let o=this.filterEnabledElements(this.splitStringToArray(e)),n=o.length;n>0&&t.push(o[n-1])})),t};show(){new b("my-popup",'\n<div class="popup">\n<div class="img-wrapper"><img src="https://png.pngtree.com/thumb_back/fw800/background/20221116/pngtree-isolated-white-background-with-a-vertical-red-gift-bow-photo-image_677817.jpg" alt="Anh"></div>\n<div class="content">\n    <p class="popup-heading">Save up to</p>\n    <h1 class="popup-offer">30% OFF</h1>\n    <p class="popup-desc">In your next holiday offer</p>\n\n    <form action="POST" class="popup-form">\n        <input class="email" type="email" placeholder="Please enter your email">\n        <input class="submit" type="button" value="Get it now">\n    </form>\n\n    <button class="refuse btnClosePopup">No, thanks</button>\n</div>\n</div>\n',this.keyPopup,this.functionPopupEnabled()).innerPopup();const e=new r(this.config.condition);e.getStatus(),!1!==e.getStatus()?!0===e.getStatus()&&!0===this.config.enable&&(new h(this.config.animations,this.keyPopup),new s(this.config.behaviors,this.keyPopup),new l(this.config.design,this.keyPopup)):console.log("Ngung")}};[{enable:!0,functionName:"popupTest1",namePopup:"Test-saas-popup",condition:{existClass:{enable:!0},existCookie:{enable:!1}},behaviors:{open:{scrollToXPercent:{enable:!0,percent:50},visitWebAfterXSeconds:{enable:!1,seconds:3e3},onClickItem:{enable:!1},afterViewXPage:{enable:!1,NumPage:3}},close:{closeAfterXSeconds:{enable:!1,seconds:3e3},closeClickButton:{enable:!0},closeClickOutside:{enable:!0}}},design:{positionPopup:{width:500,height:400,x:50,y:50},overlayPopup:{enable:!0}},animations:{appear:{enableAnimation:!0,moveFromTop:{enable:!1,duration:400,easing:"ease-in",movingLength:100},horizontalMove:{enable:!1,duration:400,easing:"ease-in",movingFrom:"right",movingLength:10},zoomIn:{enable:!0,duration:300,easing:"linear",fromPercent:80},fadeIn:{enable:!1,duration:300,easing:"ease-in"}},disappear:{enableAnimation:!0,zoomOut:{enable:!1,duration:200,easing:"ease-out"},fadeOut:{enable:!0,duration:500,easing:"ease-out"},moveToTop:{enable:!1,duration:300,easing:"ease-out",movingLength:50},horizontalMove:{enable:!1,duration:400,easing:"ease-out",movingTo:"right",movingLength:20}}}},{enable:!0,functionName:"popupTest2",namePopup:"Test-saas-popup",condition:{existClass:{enable:!0},existCookie:{enable:!1}},behaviors:{open:{scrollToXPercent:{enable:!1,percent:50},visitWebAfterXSeconds:{enable:!1,seconds:3e3},onClickItem:{enable:!0},afterViewXPage:{enable:!1,NumPage:3}},close:{closeAfterXSeconds:{enable:!1,seconds:3e3},closeClickButton:{enable:!0},closeClickOutside:{enable:!0}}},design:{positionPopup:{width:300,height:400,x:100,y:50},overlayPopup:{enable:!0}},animations:{appear:{enableAnimation:!0,moveFromTop:{enable:!1,duration:400,easing:"ease-in",movingLength:100},horizontalMove:{enable:!1,duration:400,easing:"ease-in",movingFrom:"right",movingLength:10},zoomIn:{enable:!0,duration:300,easing:"linear",fromPercent:80},fadeIn:{enable:!1,duration:300,easing:"ease-in"}},disappear:{enableAnimation:!0,zoomOut:{enable:!1,duration:200,easing:"ease-out"},fadeOut:{enable:!0,duration:500,easing:"ease-out"},moveToTop:{enable:!1,duration:300,easing:"ease-out",movingLength:50},horizontalMove:{enable:!1,duration:400,easing:"ease-out",movingTo:"right",movingLength:20}}}}].forEach((e=>{if(1==e.enable){const t=document.createElement("div");t.classList.add("my-popup",e.functionName),document.body.appendChild(t);let o=new y(e,e.functionName);o.addStyleCSS(),o.show()}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,